name: Check OKE Connectivity via Bastion

on:
  workflow_dispatch:

jobs:
  oke-bastion-connectivity:
    runs-on: ubuntu-latest

    env:
      OCI_BASTION_OCID: ${{ secrets.OCI_BASTION_OCID }}
      OCI_TARGET_RESOURCE_DETAILS: ${{ secrets.OCI_TARGET_RESOURCE_DETAILS }}
      # You can add other secrets as needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OCI CLI
        run: |
           sudo apt-get update
           sudo apt-get install -y python3-pip unzip
           pip3 install oci-cli

      - name: Set up SSH key
        # Copy your SSH key and public key from repository or secrets
        run: |
          mkdir -p ~/.ssh/bastion_key
          echo "${{ secrets.BASTION_SSH_PRIVATE_KEY }}" > ~/.ssh/bastion_key/oci_bastion_key
          echo "${{ secrets.BASTION_SSH_PRIVATE_KEY_PUB }}" > ~/.ssh/bastion_key/oci_bastion_key.pub
          chmod 600 ~/.ssh/bastion_key/oci_bastion_key
          chmod 644 ~/.ssh/bastion_key/oci_bastion_key.pub

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Validate SSH private key and extract public key
        run: |
          SSH_PUBLIC_KEY=$(ssh-keygen -y -f ~/.ssh/bastion_key/oci_bastion_key 2>/dev/null)
          if [[ -z "$SSH_PUBLIC_KEY" ]]; then
            echo "ERROR: Invalid Bastion SSH private key."
            exit 2
          fi

      - name: Create Bastion Session
        run: |
          SESSION_DETAILS=$(oci bastion session create \
            --bastion-id "$OCI_BASTION_OCID" \
            --display-name "GitHubActionsSession" \
            --ssh-public-key-file ~/.ssh/bastion_key/oci_bastion_key.pub \
            --target-resource-details "$OCI_TARGET_RESOURCE_DETAILS" \
            --wait-for-state ACTIVE \
            --query "data" \
            --raw-output)
          SESSION_ID=$(echo "$SESSION_DETAILS" | jq -r '.id')
          echo "SESSION_ID=$SESSION_ID"
          if [[ -z "$SESSION_ID" ]]; then
            echo "ERROR: Could not create Bastion session. Check Bastion OCID and SSH key."
            exit 2
          fi

      - name: Get SSH Command from Bastion Session
        run: |
          SESSION_INFO=$(oci bastion session get --session-id "$SESSION_ID" --query "data" --raw-output)
          SSH_COMMAND=$(echo "$SESSION_INFO" | jq -r '.ssh_metadata.ssh_command')
          echo "SSH Command: $SSH_COMMAND"
          if [[ -z "$SSH_COMMAND" ]]; then
            echo "ERROR: SSH command not found. Check Bastion session details."
            exit 2
          fi

      - name: Connectivity Check to OKE node
        run: |
          echo "Testing connectivity..."
          $SSH_COMMAND hostname
