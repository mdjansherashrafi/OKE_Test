name: Test OKE Connectivity via Bastion

on:
  workflow_dispatch:

jobs:
  test-oke-connection:
    runs-on: ubuntu-latest

    env:
      OCI_CLI_AUTH: api_key                # Use api_key unless running on OCI compute instance
      SUPPRESS_LABEL_WARNING: "True"       # Suppress OCI API key warning

    steps:
      - name: Setup SSH keys and configs
        run: |
          mkdir -p ~/.oci ~/.ssh/bastion_key ~/.kube

          # Write OCI config and key (match your OCI config key_file path)
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

          # Write bastion SSH private key decoded from base64 secret
          echo "${{ secrets.BASTION_KEY }}" | base64 --decode > ~/.ssh/bastion_key/oci_bastion_key
          chmod 600 ~/.ssh/bastion_key/oci_bastion_key

          # Generate public key from private key
          ssh-keygen -y -f ~/.ssh/bastion_key/oci_bastion_key > ~/.ssh/bastion_key/oci_bastion_key.pub
          chmod 644 ~/.ssh/bastion_key/oci_bastion_key.pub

          # Write kubeconfig for OKE cluster
          echo "${{ secrets.KUBECONFIG_FILE }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Create OCI Bastion session and port forwarding
        env:
          BASTION_OCID: ${{ secrets.BASTION_OCID }}
          OKE_NODE_OCID: ${{ secrets.OKE_NODE_OCID }}
        run: |
         export PATH=$HOME/bin:$PATH
         SESSION_ID=$(oci bastion session create-port-forwarding \
         --bastion-id "$BASTION_OCID" \
         --target-resource-id "$OKE_NODE_OCID" \
         --target-resource-type instance \
         --ssh-public-key-file ~/.ssh/bastion_key/oci_bastion_key.pub \
         --display-name github-oke-tunnel \
         --port 6443 \
         --query "data.id" --raw-output)

         if [[ -z "$SESSION_ID" ]]; then
         echo "❌ Failed to create Bastion session."
          exit 2
         fi

          echo "SESSION_ID=$SESSION_ID"

         # Check session state
         SESSION_STATE=$(oci bastion session get --session-id "$SESSION_ID" --query "data.lifecycle-state" --raw-output)
         echo "Bastion session state: $SESSION_STATE"
         if [[ "$SESSION_STATE" != "ACTIVE" ]]; then
           echo "❌ Bastion session is not active yet."
           exit 2
         fi

         SSH_CMD=$(oci bastion session get --session-id "$SESSION_ID" --query "data.ssh_metadata.ssh_command" --raw-output)
         if [[ -z "$SSH_CMD" ]]; then
          echo "❌ Failed to get SSH command from Bastion session."
          exit 2
         fi

          echo "Starting SSH tunnel with verbose logging..."

         # Remove -f to keep SSH in foreground, add verbose for logs
          $SSH_CMD -i ~/.ssh/bastion_key/oci_bastion_key -N -v &
          SSH_PID=$!

         # Wait for tunnel to establish
          sleep 15

          if ! nc -zv localhost 6443; then
          echo "❌ Tunnel not established (port 6443 not open)"
         # Optionally kill SSH process if still running
          kill $SSH_PID 2>/dev/null || true
          exit 2
         fi

         echo "✅ Tunnel established to OKE API endpoint."
