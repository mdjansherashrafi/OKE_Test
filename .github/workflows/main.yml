name: Test OKE Connectivity via Bastion

on:
  push:
    branches:
      - main  # Run this workflow on every push to the main branch
  workflow_dispatch:  # Allows manual triggering of the workflow from the GitHub UI

jobs:
  test-oke-connectivity:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up OCI CLI
      - name: Set up OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      # Step 3: Export environment variables from GitHub Secrets
      - name: Export OCI secrets and configure environment
        run: |
          echo "BASTION_OCID=${{ secrets.BASTION_OCID }}" >> $GITHUB_ENV
          echo "OKE_NODE_OCID=${{ secrets.OKE_NODE_OCID }}" >> $GITHUB_ENV
          echo "OCI_CONFIG_FILE=${{ secrets.OCI_CONFIG_FILE }}" >> $GITHUB_ENV
          echo "OCI_API_KEY=${{ secrets.OCI_API_KEY }}" >> $GITHUB_ENV

      # Step 4: Set up SSH key for the bastion connection
      - name: Set up SSH keys
        run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa
         ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          
      # Step 5: Create a port forwarding session through Bastion
      - name: Create Port-Forwarding Session via Bastion
        run: |
          oci bastion session create-port-forwarding \
            --bastion-id "$BASTION_OCID" \
            --target-resource-id "$OKE_NODE_OCID" \
            --target-port 22 \
            --ssh-public-key-file ~/.ssh/id_rsa.pub \
            --key-type PUB \
            --wait-for-state SUCCEEDED \
            --query data.id \
            --raw-output
          
      # Step 6: Test Connectivity to OKE node
      - name: Test OKE Connectivity
        run: |
          # Set up port forwarding for kubectl access
          kubectl config set-cluster oci-cluster --server=https://$OKE_NODE_OCID --insecure-skip-tls-verify=true
          kubectl config set-context oci-context --cluster=oci-cluster
          kubectl config use-context oci-context
          
          # Test connectivity by listing nodes in the OKE cluster
          kubectl get nodes || exit 1

      # Step 7: Clean up the port forwarding session
      - name: Clean up Port-Forwarding Session
        run: |
          oci bastion session terminate --session-id $(oci bastion session list --bastion-id "$BASTION_OCID" --query 'data[0].id' --raw-output)
