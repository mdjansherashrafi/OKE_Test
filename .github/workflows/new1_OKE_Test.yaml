  name: Test OKE_2 Connectivity

on:
  workflow_dispatch:  # Manual trigger for testing
  push:
    branches:
      - master

jobs:
  test-oke-connection:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli
      - run: oci --version

      - name: Generate SSH Key for Bastion
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/bastion_key -N "" -q
          echo "SSH key generated"
          ls -la ~/.ssh/

      - name: Setup CLI and config
        run: |
          # Debug: Print variable lengths to ensure they are set
          echo "OCI_CONFIG is set: ${#OCI_CONFIG}"
          echo "OCI_KEY is set: ${#OCI_KEY}"
          echo "BASTION_KEY is set: ${#BASTION_KEY}"
          echo "KUBECONFIG_FILE is set: ${#KUBECONFIG_FILE}"
          set -x
          mkdir -p ~/.oci ~/.ssh ~/.kube
          echo "$OCI_CONFIG" > ~/.oci/config || exit 1
          echo "$OCI_KEY" > ~/.oci/key || exit 1
          echo "$BASTION_KEY" > ~/.ssh/bastion_ssh_key || exit 1
          echo "$KUBECONFIG_FILE" > ~/.kube/config || exit 1
          chmod 400 ~/.oci/key ~/.ssh/bastion_ssh_key ~/.kube/config || exit 1

      - name: Create Bastion Session
        id: bastion
        run: |
          echo "Creating bastion session..."
          SESSION_OCID=$(oci bastion session create-port-forwarding \
            --bastion-id ${{ secrets.BASTION_OCID }} \
            --display-name "github-test-$(date +%s)" \
            --target-private-ip ${{ secrets.OKE_PRIVATE_IP }} \
            --target-port 6443 \
            --session-ttl-in-seconds 1800 \
            --ssh-public-key-file ~/.ssh/bastion_key.pub \
            --query 'data.id' \
            --raw-output)
          echo "session_ocid=${SESSION_OCID}" >> $GITHUB_OUTPUT
          echo "✅ Bastion session created: ${SESSION_OCID}"

      - name: Wait for Session to be Active
        run: |
          SESSION_OCID="${{ steps.bastion.outputs.session_ocid }}"
          echo "Waiting for session to become active..."
          for i in {1..30}; do
            STATE=$(oci bastion session get \
              --session-id ${SESSION_OCID} \
              --query 'data."lifecycle-state"' \
              --raw-output)
            echo "Attempt $i: Session state is ${STATE}"
            if [ "${STATE}" = "ACTIVE" ]; then
              echo "✅ Session is now active!"
              break
            elif [ "${STATE}" = "FAILED" ]; then
              echo "❌ Session creation failed!"
              exit 1
            fi
            sleep 10
          done
          if [ "${STATE}" != "ACTIVE" ]; then
            echo "❌ Timeout waiting for session to become active"
            exit 1
          fi

      - name: Get SSH Connection Details
        id: ssh_details
        run: |
          SESSION_OCID="${{ steps.bastion.outputs.session_ocid }}"

      - name: k8s secrets validation non prod
        env:
          BASTION_KEY: ${{ secrets.BASTION_KEY }}
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_FILE }}
          OCI_CONFIG: ${{ secrets.OCI_CONFIG }}
          OCI_KEY: ${{ secrets.OCI_KEY }}
          BASTION_IP_ADDRESS: ${{ secrets.BASTION_IP_ADDRESS }}
          OKE_IP_ADDRESS: ${{ secrets.OKE_IP_ADDRESS }}
        run: |
          ## Installation of binaries, set up .ssh and .kube dir
          mkdir -p ~/.oci/ ~/.ssh/ ~/.kube/
          echo "$OCI_CONFIG" > ~/.oci/config
          echo "$OCI_KEY" > ~/.oci/key
          echo "$BASTION_KEY" > ~/.ssh/bastion
          echo "$KUBECONFIG_FILE" > ~/.kube/config
          chmod 400 ~/.oci/key ~/.oci/config ~/.ssh/bastion
          ssh -o LogLevel=ERROR -o StrictHostKeyChecking=no -f -n opc@${{ secrets.BASTION_IP_ADDRESS }} -i ~/.ssh/bastion -N -L 6443:${{ secrets.OKE_IP_ADDRESS }}:6443 sleep 900
          ENV_ENABLE_BUILD_TEST=false ENV_VALIDATE_SEALED_SECRETS_ENABLED=true ./.github/workflows/lint-k8s-manifests.sh
      - name: Create SSH Tunnel to OKE
        run: |
          echo "Creating SSH tunnel to OKE..."
          echo "SSH tunnel started"
          if netstat -tln | grep -q ":6443"; then
            echo "✅ SSH tunnel is listening on port 6443"
          else
            echo "❌ SSH tunnel failed to start"
            exit 1
          fi

      - name: Test OKE API Connectivity
        run: |
          echo "Testing OKE API connectivity..."
          if curl -k --connect-timeout 10 --max-time 30 \
            -s https://localhost:6443/version; then
            echo "✅ OKE API server is reachable!"
          else
            echo "❌ Failed to reach OKE API server"
            exit 1
          fi
