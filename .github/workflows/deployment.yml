name: Deploy PostgreSQL to OKe

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
  KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG_CONTENT }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install OCI CLI
        run: |
          pip install oci-cli
      
      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=$OCI_CLI_USER
          fingerprint=$OCI_CLI_FINGERPRINT
          tenancy=$OCI_CLI_TENANCY
          region=$OCI_CLI_REGION
          key_file=~/.oci/oci_api_key.pem
          EOF
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Print Kubeconfig content
        run: |
          cat $HOME/.kube/config

           # Generate kubeconfig directly from OCI CLI
          oci ce cluster create-kubeconfig \
            --cluster-id $OKE_CLUSTER_ID \
            --file $HOME/.kube/config \
            --region $OCI_CLI_REGION \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT
          
          chmod 600 $HOME/.kube/config
          
          # Print kubeconfig without sensitive info for debugging
          grep -v "token\|cert-data" $HOME/.kube/config
          
          # Verify kubectl can connect to the cluster
          kubectl cluster-info
                   
          # Make sure we're in the right context
          kubectl config current-context
      - name: List k8s directory contents
        run: ls -alh k8s/

      - name: Deploy PostgreSQL to OKE
        run: |
          kubectl apply -f k8s/postgresql-deployment.yml
          kubectl apply -f k8s/postgresql-service.yml
      
      - name: Verify deployment
        run: |
          kubectl get pods -n postgres-ns
          kubectl get svc -n postgres-ns
